configfile: "config.yaml"

assembly = config["assembly"]
paf = config["PAF_file"]
lg = config["lg_count"]
os = config["OS_info"]

rule all:
  input:


rule repeatmask:
  input: assembly
  output: "repeatmask/repeatmasked.fa.gz"
  message: "Using Red to repeat-mask the genome assembly {input}"
  threads: 30
  shell:
    """
    file={input}
    if [ "${{file: -3}}" == ".gz" ]; then
      echo "Assembly is compressed, decompressing"
      file=$(basename $file .gz)
      gunzip --stdout {input} > $file
    fi
    ext=$(echo $file | rev | cut -d"." -f1 | rev)
    if [ $ext != "fa" ]; then
      echo "Assembly file extension must end in .fa for Red, creating a symlink with the corrected name"
      ln -sr $file ${{file}}.fa
    fi
    deps/Red -gnm . -msk repeatmask -sco repeatmask -cnd repeatmask
    firstletters=$(echo $file | cut -c1-5 )
    mv repeatmask/${{firstletters}}*msk.fa.gz {output}
    """

rule chain_1:
  input:
  output:
  message: "Running Lastz via HaploMerger2"
  threads: 30
  params:
    os = 
  shell:
    """
    export PATH="$PATH:test"

    """

rule chain_2:
  input:
  output:
  message: "Running HaploMerger2 to generate the chain file"
  threads: 30
  shell:
    """
    """

rule extract_markers:
  input: "../2_Filtering/data_f.call.gz"
  output: "snps.txt"
  message: "Extracting marker information from Lep-Map3 data file {input}"
  shell: "../scripts/extract_markers.sh {input}"

rule generate_intervals:
  input:
    markers = "snps.txt",
    intervals = expand("../7_Intervals/ordered.{x}.intervals", x = range(1,exp_lg + 1))
  output: 
    intervals = "lepmap3_intervals.la"
  message: "Combining Lep-Map3 intervals files into LepAnchor input"
  params:
    lg = exp_lg
  shell: 
    """
    for i in $(seq 1 {params.lg}); do
      awk -vn=$i '(NR==FNR){{map[NR-1]=$0}}(NR!=FNR){{$1=map[$1] "\t" n;print}}' {input.markers} ../7_Intervals/ordered.$i.intervals >> {output.intervals}
    done
    """

rule lepanchor:
  input:
    genome = assembly,
    paf_file = paf,
    chain = ,
    intervals = "lepmap3_intervals.la"
  output:
  message: "Running LepAnchor"
  threads: 30
  shell: 
  """
  if [ {input.paf_file} == "none" ]; then
    lepanchor_wrapper.sh -t {threads} -f {input.genome} -n {lg} -c {input.chain} -m {input.intervals} 2> err.log
  else
    lepanchor_wrapper.sh -t {threads} -f {input.genome} -n {lg} -c {input.chain} -m {input.intervals} -p {input.paf} 2> err.log
  fi
  """