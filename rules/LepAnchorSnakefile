from os import path
import glob

configfile: "config.yaml"

geno = config["assembly"]
paf = config["PAF_file"]
lg = config["lg_count"]
os_name = config["OS_info"]

rule all:
  input: "9_Chain/repeatmasked.repeatmaskedx.result/all.chain.gz"

rule repeatmask:
  input: geno
  output: "8_Repeatmask/repeatmasked.fa.gz"
  log: "8_Repeatmask/Red.log"
  message: "Using Red to repeat-mask the genome assembly {input}"
  threads: 30
  shell:
    """
    file={input}
    if [ "${{file: -3}}" == ".gz" ]; then
      echo "- Assembly is compressed, creating decompressed copy"
      file=$(basename $file .gz)
      gunzip --stdout {input} > $file
    fi
    ext=$(echo $file | rev | cut -d"." -f1 | rev)
    if [ $ext != "fa" ]; then
      echo "- Assembly extension must end in .fa for Red, creating a corrected symlink"
      ln -srf $file ${{file}}.fa
    fi
    echo "- Running Red"
    LA/deps/Red -gnm . -msk 8_Repeatmask -sco 8_Repeatmask -cnd 8_Repeatmask -rpt 8_Repeatmask > {log} 2>> {log}
    echo "- Compressing repeat-masked genome from Red"
    gzip --stdout 8_Repeatmask/*.msk > {output} && rm 8_Repeatmask/*.msk
    """
    
  
rule chain_1:
  input: 
    geno = "8_Repeatmask/repeatmasked.fa.gz",
    ctrl = "LA/deps/all_lastz.ctl",
    scoremtx = "LA/deps/scoreMatrix.q"
  output: 
    out1 = "9_Chain/repeatmaskedx.sizes",
    out2 = "9_Chain/repeatmasked.sizes"
  message: "Running Lastz via HaploMerger2"
  threads: 30
  params:
    os = os_name
  shell:
    """
    OS=$(echo {params} | tr '[:upper:]' '[:lower:]')
    echo "Using the $OS lastz/chainNet binaries"
    if [ $OS == "ubuntu" ]
    then
        export PATH="$PATH:LA/deps/ubuntu"
    elif [ $OS == "centos5" ]
    then
        export PATH="$PATH:LA/deps/centOS5"
    elif [ $OS == "centos6" ]
    then
        export PATH="$PATH:LA/deps/centOS6"
    else
        echo "$OS is not recognized as one of Ubuntu, CentOS5, or CentOS6, defaulting to Ubuntu"
        export PATH="$PATH:LA/deps/ubuntu"
    fi
    ln -srf {input} 9_Chain/
    cd 9_Chain
    ../LA/deps/step1.HM2 repeatmasked {threads}
    """

rule chain_2:
  input: 
    f1 = "9_Chain/repeatmaskedx.sizes",
    f2 = "9_Chain/repeatmasked.sizes"
  output: 
    original = "9_Chain/repeatmasked.repeatmaskedx.result/all.chain.gz",
    slink = "9_Chain/chainfile.gz"
  message: "Running HaploMerger2 to generate the chain file"
  threads: 30
  params:
    os = os_name
  shell:
    """
    OS=$(echo {params} | tr '[:upper:]' '[:lower:]')    echo "Using the $OS lastz/ chainNet binaries"
    echo "Using the $OS lastz/chainNet binaries"
    if [ $OS == "ubuntu" ]
    then
        export PATH="$PATH:LA/deps/ubuntu"
    elif [ $OS == "centos5" ]
    then
        export PATH="$PATH:LA/deps/centOS5"
    elif [ $OS == "centos6" ]
    then
        export PATH="$PATH:LA/deps/centOS6"
    else
        echo "$OS is not recognized as one of Ubuntu, CentOS5, or CentOS6, defaulting to Ubuntu"
        export PATH="$PATH:LA/deps/ubuntu"
    fi
    
    cd 9_Chain
    ../LA/deps/step2.HM2 repeatmasked {threads} && rm -r repeatmasked.repeatmaskedx.result/raw.axt
    ln -sr {output.original} {output.slink}
    """

  rule extract_markers:
    input: "2_Filtering/data_f.call.gz"
    output: "snps.txt"
    message: "Extracting marker information from Lep-Map3 data file {input}"
    shell: "scripts/extract_markers.sh {input}"


rule generate_intervals:
  input:
    markers = "snps.txt",
    intervals = expand("7_Intervals/ordered.{x}.intervals", x = range(1, exp_lg + 1))
  output: 
    intervals = "8_Anchoring/lepmap3_intervals.la"
  message: "Combining {params} Lep-Map3 interval files into single LepAnchor input {output}"
  params:
    lg = exp_lg
  shell: 
    """
    for i in $(seq 1 {params.lg}); do
      awk -vn=$i '(NR==FNR){{map[NR-1]=$0}}(NR!=FNR){{$1=map[$1] "\t" n;print}}' {input.markers} 7_Intervals/ordered.$i.intervals >> {output.intervals}
    done
    """